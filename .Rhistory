data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000)
p_test
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000) + ylim(500000, 2000000)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000) + ylim(5000000, 20000000)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000) + xlim(5000000, 20000000)
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000) + xlim(5000000, 20000000)
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000)+xlim(30000,500000)
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000)+xlim(30000,500000)
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000)+xlim(30000,500000)
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000)+xlim(30000,500000)
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(50000, 200000)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2) + ylim(5000, 20000)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
p_test = ggplot(data = data2_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred2), color='red', size=1.5)
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# KNN with K = 60
knn60 = knnreg(price ~ mileage, data=data1, k=60)
rmse(knn60, data1_test)
# attach the predictions to the test data frame
data1_test = data1_test %>%
mutate(price_pred1 = predict(knn60, data1_test))
p_test = ggplot(data = data1_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2)
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
rmse_cv1 =   foreach(K = 1:maxK, .combine='rbind') %do% {
foreach(i=1:10, .combine='rbind')%do% {
# 1. Split the data into training and testing
data1_split =  initial_split(data1, prop=0.8)
data1_train = training(data1_split)
data1_test  = testing(data1_split)
# 2. Knn regress price on mileage with k=1-20(maxK)
knn1 = knnreg(price ~ mileage, data=data1_train, k=K)
# 3. Calculate rmse
c(km=K,rmse=modelr::rmse(knn1,data=data1_test),predict=modelr::predict(knn1, data1_test))
}
}%>% as.data.frame
data = olympics_top20 %>% group_by(sport,sex) %>% filter(sex=="F")
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(knitr)
library(tidyverse)
library(ggplot2)
library(reshape2)
library(gapminder)
library(mosaic)
library(extraDistr)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(rsample)  # for creating train/test splits
load(file = "data.RData")
data = olympics_top20 %>% group_by(sport,sex) %>% filter(sex=="F")
quantile(data$height, 0.95)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(knitr)
library(tidyverse)
library(ggplot2)
library(reshape2)
library(gapminder)
library(mosaic)
library(extraDistr)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(rsample)  # for creating train/test splits
ABIA <- read.csv('ABIA.csv')
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
ABIA <- read.csv('ABIA.csv')
ABIA <- read.csv('ABIA.csv')
olympics_top20 <- read.csv('olympics_top20.csv')
sclass <- read.csv('sclass.csv')
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
# Maxk: 1- up to X
maxK=200
#
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
rmse_350[rmse_350$rmse==min(rmse_350$rmse),]
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
# Maxk: 1- up to X
maxK=200
#
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
rmse_350[rmse_350$rmse==min(rmse_350$rmse),]
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
# Maxk: 1- up to X
maxK=200
#
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
rmse_350[rmse_350$rmse==min(rmse_350$rmse),]
rmse_350[rmse_350$rmse==min(rmse_350$rmse),]
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
# Maxk: 1- up to X
maxK=200
#
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
rmse_350[rmse_350$rmse==min(rmse_350$rmse),]
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
# Maxk: 1- up to X
maxK=200
#
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
# Maxk: 1- up to X
maxK=200
#
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
# Maxk: 1- up to X
maxK=200
#
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
# Maxk: 1- up to X
maxK=200
#
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
rmse_350[rmse_350$rmse==min(rmse_350$rmse),]
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
rmse_350[rmse_350$rmse==min(rmse_350$rmse),]
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
rmse_350[rmse_350$rmse==min(rmse_350$rmse),]
rmse_350 = foreach(K = 2:maxK, .combine='rbind') %do% {
data350_split = initial_split(data1, prop=0.8)
data350_train = training(data350_split)
data350_test = testing(data350_split)
knn1 = knnreg(price ~ mileage, data=data350_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=data350_test))
}%>% as.data.frame
rmse_350[rmse_350$rmse==min(rmse_350$rmse),]
#ggplot(rmse_350, aes(k))+geom_line(aes(y=rmse), color = "tomato")+ggtitle("RMSE/K of 350")+theme(plot.title = element_text(hjust = 0.5))
ggplot(rmse_350, aes(k))+geom_line(aes(y=rmse), color = "tomato")+ggtitle("RMSE/K of 350")+theme(plot.title = element_text(hjust = 0.5))
knn18 = knnreg(price ~ mileage, data=data1, k=18)
data350_test = data350_test %>%
mutate(price_pred1 = predict(knn18, data350_test))
p_test = ggplot(data = data350_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.2)
p_test + geom_line(aes(x = mileage, y = price_pred1), color='red', size=1.5)
scale=0.1
data = ABIA %>% group_by(ArrTime) %>% summarize(mean = mean(ArrDelay, na.rm=T))
ggplot(data)+geom_line(aes(x = ArrTime, y = mean))+ggtitle("The mean of minutes of arrival delays by Arrival Time")
View(data)
scale=0.1
data = ABIA %>% group_by(ArrTime) %>% summarize(mean = mean(ArrDelay, na.rm=FALSE))
ggplot(data)+geom_line(aes(x = ArrTime, y = mean))+ggtitle("The mean of minutes of arrival delays by Arrival Time")
scale=0.1
data = ABIA %>% group_by(ArrTime) %>% summarize(mean = mean(ArrDelay, na.rm=T))
ggplot(data)+geom_line(aes(x = ArrTime, y = mean))+ggtitle("The mean of minutes of arrival delays by Arrival Time")
View(ABIA)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(knitr)
library(tidyverse)
library(ggplot2)
library(reshape2)
library(gapminder)
library(mosaic)
library(extraDistr)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(rsample)  # for creating train/test splits
ABIA <- read.csv('ABIA.csv')
olympics_top20 <- read.csv('olympics_top20.csv')
sclass <- read.csv('sclass.csv')
data1 <- sclass %>% group_by(trim) %>% filter(trim=="350")
data2 <- sclass %>% group_by(trim) %>% filter(trim=="65 AMG")
load("~/GitHub/exercise1/.RData")
K_folds = 5
data1 = data1 %>%
mutate(fold_id1 = rep(1:K_folds, length=nrow(data1)) %>% sample)
data1_folds = crossv_kfold(data1, k=K_folds)
### 1. find optimal K
data1_cv_grid = foreach(k = 1:200, .combine='rbind') %do% {
models1 = map(data1_folds$train, ~ knnreg(price ~ mileage, k=k, data = ., use.all=FALSE))
errs1 = map2_dbl(models1, data1_folds$test, modelr::rmse)
c(k=k, err = mean(errs1), std_err = sd(errs1)/sqrt(K_folds))
} %>% as.data.frame
data1_cv_grid[data1_cv_grid$err==min(data1_cv_grid$err),]
ggplot(data1_cv_grid ,aes(x=k, y=err))+geom_line()
optimal_k=15
x=data.frame()
y=data.frame()
yhat=data.frame()
for(fold in 1:K_folds) {
knn1 = knnreg(price ~ mileage, data=filter(data1, fold_id1 != fold), k=optimal_k)
x <- rbind(filter(data1, fold_id1 == fold)[,"mileage"],x)
y <- rbind(filter(data1, fold_id1 == fold)[,"price"],y)
yhat <- rbind(as.data.frame(predict(knn1,filter(data1, fold_id1 == fold))),yhat)
}
predict1 = data.frame(c(x,y,yhat))
colnames(predict1) <- c("mileage", "y","yhat")
ggplot(data = predict1) + geom_point(mapping = aes(x = mileage, y = y), alpha=0.2)+ geom_line(aes(x = mileage, y = yhat), color='red', size=1.5)
data2 <- sclass %>% group_by(trim) %>% filter(trim=="65 AMG")
#Run K-nearest-neighbors, for many different values of K, starting at K=2 and going as high as you need to. For each value of K, fit the model to the training set and make predictions on your test set.
rmse_AMG = foreach(K = 2:maxK, .combine='rbind') %do% {
dataAMG_split = initial_split(data2, prop=0.8)
dataAMG_train = training(dataAMG_split)
dataAMG_test = testing(dataAMG_split)
knn1 = knnreg(price ~ mileage, data=dataAMG_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=dataAMG_test))
}%>% as.data.frame
rmse_AMG[rmse_AMG$rmse==min(rmse_AMG$rmse),]
data2 <- sclass %>% group_by(trim) %>% filter(trim=="65 AMG")
#Run K-nearest-neighbors, for many different values of K, starting at K=2 and going as high as you need to. For each value of K, fit the model to the training set and make predictions on your test set.
rmse_AMG = foreach(K = 2:maxK, .combine='rbind') %do% {
dataAMG_split = initial_split(data2, prop=0.8)
dataAMG_train = training(dataAMG_split)
dataAMG_test = testing(dataAMG_split)
knn1 = knnreg(price ~ mileage, data=dataAMG_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=dataAMG_test))
}%>% as.data.frame
rmse_AMG[rmse_AMG$rmse==min(rmse_AMG$rmse),]
data2 <- sclass %>% group_by(trim) %>% filter(trim=="65 AMG")
#Run K-nearest-neighbors, for many different values of K, starting at K=2 and going as high as you need to. For each value of K, fit the model to the training set and make predictions on your test set.
rmse_AMG = foreach(K = 2:maxK, .combine='rbind') %do% {
dataAMG_split = initial_split(data2, prop=0.8)
dataAMG_train = training(dataAMG_split)
dataAMG_test = testing(dataAMG_split)
knn1 = knnreg(price ~ mileage, data=dataAMG_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=dataAMG_test))
}%>% as.data.frame
rmse_AMG[rmse_AMG$rmse==min(rmse_AMG$rmse),]
data2 <- sclass %>% group_by(trim) %>% filter(trim=="65 AMG")
#Run K-nearest-neighbors, for many different values of K, starting at K=2 and going as high as you need to. For each value of K, fit the model to the training set and make predictions on your test set.
rmse_AMG = foreach(K = 2:maxK, .combine='rbind') %do% {
dataAMG_split = initial_split(data2, prop=0.8)
dataAMG_train = training(dataAMG_split)
dataAMG_test = testing(dataAMG_split)
knn1 = knnreg(price ~ mileage, data=dataAMG_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=dataAMG_test))
}%>% as.data.frame
rmse_AMG[rmse_AMG$rmse==min(rmse_AMG$rmse),]
data2 <- sclass %>% group_by(trim) %>% filter(trim=="65 AMG")
#Run K-nearest-neighbors, for many different values of K, starting at K=2 and going as high as you need to. For each value of K, fit the model to the training set and make predictions on your test set.
rmse_AMG = foreach(K = 2:maxK, .combine='rbind') %do% {
dataAMG_split = initial_split(data2, prop=0.8)
dataAMG_train = training(dataAMG_split)
dataAMG_test = testing(dataAMG_split)
knn1 = knnreg(price ~ mileage, data=dataAMG_train, k=K)
c(k=K,rmse=modelr::rmse(knn1,data=dataAMG_test))
}%>% as.data.frame
rmse_AMG[rmse_AMG$rmse==min(rmse_AMG$rmse),]
ggplot(rmse_AMG, aes(k))+geom_line(aes(y=rmse), color = "tomato")+ggtitle("RMSE/K of 65 AMG")+theme(plot.title = element_text(hjust = 0.5))
knn56 = knnreg(price ~ mileage, data=data2, k=17)
dataAMG_test = dataAMG_test %>%
mutate(price_pred2 = predict(knn56, dataAMG_test))
p_test = ggplot(data = dataAMG_test) + geom_point(mapping = aes(x = mileage, y = price), alpha=0.2)
p_test + geom_line(aes(x = mileage, y = price_pred2), color='red', size=1.5)
data2 = data2 %>%
mutate(fold_id2 = rep(1:K_folds, length=nrow(data2)) %>% sample)
data2_folds = crossv_kfold(data2, k=K_folds)
### 1. find optimal K
data2_cv_grid = foreach(k = 1:200, .combine='rbind') %do% {
models2 = map(data2_folds$train, ~ knnreg(price ~ mileage, k=k, data = ., use.all=FALSE))
errs2 = map2_dbl(models2, data2_folds$test, modelr::rmse)
c(k=k, err = mean(errs2), std_err = sd(errs2)/sqrt(K_folds))
} %>% as.data.frame
data2_cv_grid[data2_cv_grid$err==min(data2_cv_grid$err),]
data2 = data2 %>%
mutate(fold_id2 = rep(1:K_folds, length=nrow(data2)) %>% sample)
data2_folds = crossv_kfold(data2, k=K_folds)
### 1. find optimal K
data2_cv_grid = foreach(k = 1:200, .combine='rbind') %do% {
models2 = map(data2_folds$train, ~ knnreg(price ~ mileage, k=k, data = ., use.all=FALSE))
errs2 = map2_dbl(models2, data2_folds$test, modelr::rmse)
c(k=k, err = mean(errs2), std_err = sd(errs2)/sqrt(K_folds))
} %>% as.data.frame
data2_cv_grid[data2_cv_grid$err==min(data2_cv_grid$err),]
optimal_k=13
x=data.frame()
y=data.frame()
yhat=data.frame()
for(fold in 1:K_folds) {
knn2 = knnreg(price ~ mileage, data=filter(data2, fold_id2 != fold), k=optimal_k)
x <- rbind(filter(data2, fold_id2 == fold)[,"mileage"],x)
y <- rbind(filter(data2, fold_id2 == fold)[,"price"],y)
yhat <- rbind(as.data.frame(predict(knn2,filter(data2, fold_id2 == fold))),yhat)
}
predict2 = data.frame(c(x,y,yhat))
colnames(predict2) <- c("mileage", "y","yhat")
ggplot(data = predict2) + geom_point(mapping = aes(x = mileage, y = y), alpha=0.2)+ geom_line(aes(x = mileage, y = yhat), color='red', size=1.5)ggplot(data2_cv_grid ,aes(x=k, y=err))+geom_line()
ggplot(data2_cv_grid ,aes(x=k, y=err))+geom_line()
optimal_k=13
x=data.frame()
y=data.frame()
yhat=data.frame()
for(fold in 1:K_folds) {
knn2 = knnreg(price ~ mileage, data=filter(data2, fold_id2 != fold), k=optimal_k)
x <- rbind(filter(data2, fold_id2 == fold)[,"mileage"],x)
y <- rbind(filter(data2, fold_id2 == fold)[,"price"],y)
yhat <- rbind(as.data.frame(predict(knn2,filter(data2, fold_id2 == fold))),yhat)
}
predict2 = data.frame(c(x,y,yhat))
colnames(predict2) <- c("mileage", "y","yhat")
ggplot(data = predict2) + geom_point(mapping = aes(x = mileage, y = y), alpha=0.2)+ geom_line(aes(x = mileage, y = yhat), color='red', size=1.5)
